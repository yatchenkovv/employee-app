{"version":3,"sources":["services/storageService.ts","services/employeeService.ts","reducers/index.tsx","store/configureStore.tsx","components/header/header.tsx","components/employeeCard/employeeCard.tsx","components/toolbar/toolbar.tsx","components/employee/employee.tsx","components/employees/employees.list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StorageService","initDB","localStorage","setItem","JSON","stringify","Id","fullName","position","dateOfBirth","Date","gender","isFired","getData","parse","getItem","saveData","employees","getSequenceId","maxId","Math","max","apply","map","empl","Number","NEGATIVE_INFINITY","employeeService","hasChangeEmployee","every","employeeDB","tempEmloyee","find","updateEmployees","state","initialState","selectedEmployee","store","createStore","action","type","employee","payload","newState","Object","assign","window","confirm","_employees","filter","newEmployee","newEmployeeCollection","concat","Header","className","Component","EmployeeCard","props","handleChangeDate","date","setState","handleChangePosition","event","target","value","handleChangeGender","handleChangeFired","checked","getUTCDate","getTime","getTimezoneOffset","handleChangeFullName","bind","console","log","formModified","this","hasChangedControl","name","onChange","selected","Toolbar","onClick","save","update","disabled","hasSelected","delete","add","EmployeeItem","key","selectedEmployeeId","onSelectedEmployee","EmployeesList","unsubscribeStore","getState","subscribe","updatetStateFromStore","App","onSaveChangesEmployee","onUpdateDataEmployees","onDeleteSelectedEmployee","onAddNewEmployee","React","connect","dispatch","id","_fullName","document","getElementsByName","_position","_dateOfBirth","querySelector","_isFired","_gender","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kMAEaA,EACF,CACHC,OADG,WAECC,aAAaC,QAAQ,YAAaC,KAAKC,UAAU,CAAC,CAC9CC,GAAI,IACJC,SAAU,yIACVC,SAAU,2JACVC,YAAa,IAAIC,KAAK,cACtBC,OAAQ,qBACRC,SAAS,GAEb,CACIN,GAAI,IACJC,SAAU,6HACVC,SAAU,uKACVC,YAAa,IAAIC,KAAK,cACtBC,OAAQ,qBACRC,SAAS,GAEb,CACIN,GAAI,IACJC,SAAU,mIACVC,SAAU,yDACVC,YAAa,IAAIC,KAAK,cACtBC,OAAQ,qBACRC,SAAS,OAGjBC,QA3BG,WA6BC,OAD+BT,KAAKU,MAAOZ,aAAaa,QAAQ,eAGpEC,SA/BG,SA+BMC,GACLf,aAAaC,QAAQ,YAAaC,KAAKC,UAAUY,KAErDC,cAlCG,SAkCWD,GACV,IAAIE,EAAQ,EAIZ,OAHIC,KAAKC,IAAIC,MAAMF,MAAOH,GAAa,IAAIM,KAAI,SAACC,GAAD,OAAUA,EAAKlB,SAASmB,OAAOC,oBAC1EP,EAAQC,KAAKC,IAAIC,MAAMF,KAAOH,EAAWM,KAAI,SAACC,GAAD,OAAUA,EAAKlB,QAEzDa,EAAQ,MCtCdQ,EACF,CACHC,kBADG,SACeX,GAEd,OADwBjB,EAAea,UAChBgB,OAAM,SAACC,GAC1B,IAAMC,EAAcd,EAAUe,MAAK,SAACR,GAAD,OAAUA,EAAKlB,KAAOwB,EAAWxB,MACpE,OAAmB,OAAXyB,QAAW,IAAXA,OAAA,EAAAA,EAAatB,eAAgBqB,EAAWrB,aACvCsB,EAAYxB,WAAauB,EAAWvB,UACpCwB,EAAYpB,SAAWmB,EAAWnB,QAClCoB,EAAYnB,UAAYkB,EAAWlB,SACnCmB,EAAYvB,WAAasB,EAAWtB,aAIrDyB,gBAbG,SAaaC,GACZ,OAAO,2BACAA,GADP,IAEIjB,UAAWjB,EAAea,cChBpCkB,EAAyB,CAC3BzB,GAAI,EACJC,SAAU,IACVC,SAAU,GACVC,YAAa,IAAIC,KACjBC,OAAQ,GACRC,SAAS,GAEAuB,EAAe,CACxBC,iBAAkBL,EAClBd,UAAWjB,EAAea,WCbvB,IAAMwB,EAAQC,aDiBd,WAA6D,IAAxCJ,EAAuC,uDAA/BC,EAAcI,EAAiB,uCAC/D,OAAOA,EAAOC,MACV,IAAK,oBACD,IAAMC,EAAWP,EAAMjB,UAAUe,MAAK,SAACR,GAAD,OAAqBA,EAAKlB,KAAOiC,EAAOG,QAAQpC,MAChFqC,EAAWC,OAAOC,OAAO,GAAIX,EAAO,CACtCE,iBAAkBK,IAEtB,OAAOE,EACX,IAAK,eACD,OAAO,eACAT,GAEX,IAAK,wBACD,GAAKP,EAAgBC,kBAAkBM,EAAMjB,WAKzC,OAAOU,EAAgBM,gBAAgBC,GAJvC,GAAIY,OAAOC,QAAQ,sQACnB,OAAOpB,EAAgBM,gBAAgBC,GAK/C,IAAK,2BACD,IAAMc,EAAad,EAAMjB,UAAUgC,QAAO,SAACzB,GAAD,OAAUA,EAAKlB,KAAO4B,EAAME,iBAAiB9B,MAIvF,OAHA4B,EAAME,iBAAmBL,EACzB/B,EAAegB,SAASgC,GACxBd,EAAMjB,UAAY+B,EACX,eACAd,GAEX,IAAK,mBACDK,EAAOG,QAAQQ,YAAY5C,GAAKN,EAAekB,cAAcgB,EAAMjB,WACnE,IAAMkC,GAAyBjB,EAAMjB,WAAa,IAAImC,OAAOb,EAAOG,QAAQQ,aAE5E,OADAlD,EAAegB,SAASmC,GACjBP,OAAOC,OAAO,CAACT,iBAAkBG,EAAOG,QAAQQ,aAAc,CAACjC,UAAWkC,IAErF,QAAS,OAAOjB,KCnDsBC,G,4BCCjCkB,G,kBAAb,uKAEQ,OACI,yBAAKC,UAAU,kCACX,0BAAMA,UAAU,2BAAhB,wGAJhB,GAA4BC,c,yBCGfC,G,MAAb,kDACI,WAAYC,GAA4B,IAAD,8BACnC,cAAMA,IAkBHC,iBAAmB,SAACC,GACvB,EAAKC,SAAS,CACZxB,iBAAkBQ,OAAOC,OAAO,EAAKY,MAAMhB,SAAU,CAAEhC,YAAakD,OArBnC,EAyBhCE,qBAAuB,SAACC,GAC3B,EAAKF,SAAS,CACVxB,iBAAkBQ,OAAOC,OAAO,EAAKY,MAAMhB,SAAU,CAAEjC,SAAWsD,EAAMC,OAAOC,WA3BhD,EA+BhCC,mBAAqB,SAACH,GACzB,EAAKF,SAAS,CACVxB,iBAAkBQ,OAAOC,OAAO,EAAKY,MAAMhB,SAAU,CAAE9B,OAASmD,EAAMC,OAAOC,WAjC9C,EAqChCE,kBAAoB,SAACJ,GACxB,EAAKF,SAAS,CACVxB,iBAAkBQ,OAAOC,OAAO,EAAKY,MAAMhB,SAAU,CAAE7B,QAAUkD,EAAMC,OAAOI,aAvC/C,EA2ChCC,WAAa,WAAwB,IAAvBT,EAAsB,uDAAf,IAAIjD,KAI5B,MAHoB,kBAATiD,IACPA,EAAO,IAAIjD,KAAKiD,IAEb,IAAIjD,KAAKiD,EAAKU,UAAuC,GAA3BV,EAAKW,oBAA2B,MA5CjE,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKd,iBAAmB,EAAKA,iBAAiBc,KAAtB,gBACxB,EAAKX,qBAAuB,EAAKA,qBAAqBW,KAA1B,gBAC5B,EAAKP,mBAAqB,EAAKA,mBAAmBO,KAAxB,gBAC1B,EAAKN,kBAAoB,EAAKA,kBAAkBM,KAAvB,gBAPU,EAD3C,iEAWgCV,GACxBW,QAAQC,IAAI,wBACX5B,OAAe6B,cAAe,EAC/BC,KAAKhB,SAAS,CACViB,mBAAmB,EACnBzC,iBAAkBQ,OAAOC,OAAO+B,KAAKnB,MAAMhB,SAAU,CAAElC,SAAWuD,EAAMC,OAAOC,YAhB3F,+BAqDQ,IAAMjC,EAAyB,CAC3BzB,GAAI,EACJC,SAAU,IACVC,SAAU,GACVC,YAAa,IAAIC,KACjBC,OAAQ,GACRC,SAAS,GAEP6B,EAAYmC,KAAKnB,MAAMhB,SAAWmC,KAAKnB,MAAMhB,SAAWV,EAC9D,OACI,yBAAKuB,UAAU,6BACX,yBAAKA,UAAU,aACX,6IACA,6BACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,qDACA,2BAAOd,KAAK,OACJsC,KAAK,WACLxB,UAAU,eACVU,MAAOvB,EAASlC,SAChBwE,SAAUH,KAAKL,wBAE3B,yBAAKjB,UAAU,cACX,yFACA,4BAAQwB,KAAK,WAAWxB,UAAU,eAAeU,MAAOvB,EAASjC,SAAUuE,SAAUH,KAAKf,sBACtF,8CACA,4LACA,wMACA,0FACA,oFACA,mGAIZ,yBAAKP,UAAU,0BACX,yBAAKA,UAAU,cACX,4GACA,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CACI0B,SAAUJ,KAAKR,WAAW3B,EAAShC,aACnCsE,SAAUH,KAAKlB,qBAI3B,yBAAKJ,UAAU,cACX,qDACA,yBAAKA,UAAU,SACX,2BAAOA,UAAU,gBAAjB,0BAEI,2BAAOd,KAAK,QACJsC,KAAK,eACLd,MAAM,qBACNG,QAA6B,uBAApB1B,EAAS9B,OAClBoE,SAAUH,KAAKX,sBAP/B,eAUI,2BAAOX,UAAU,gBAAjB,0BAEI,2BAAOd,KAAK,QACJsC,KAAK,eACLd,MAAM,qBACNG,QAA6B,uBAApB1B,EAAS9B,OAClBoE,SAAUH,KAAKX,sBAhB/B,OAmBI,0BAAMX,UAAU,oBAAhB,6CACU,2BAAOd,KAAK,WACNsC,KAAK,QACLX,QAAS1B,EAAS7B,QAClBmE,SAAUH,KAAKV,gCA7HvE,GAAkCX,cCHrB0B,EAAb,kDACI,WAAYxB,GAAuB,uCACzBA,GAFd,qDAMQ,OACI,yBAAKH,UAAU,uDACX,yBAAKA,UAAU,gBACX,4BAAQ4B,QAASN,KAAKnB,MAAM0B,KAAM7B,UAAU,iBAA5C,iHACA,4BAAQ4B,QAASN,KAAKnB,MAAM2B,OAAQ9B,UAAU,iBAA9C,yFACA,4BAAQ+B,UAAWT,KAAKnB,MAAM6B,YAAaJ,QAASN,KAAKnB,MAAM8B,OAAQjC,UAAU,iBAAjF,wKACA,4BAAQ4B,QAASN,KAAKnB,MAAM+B,IAAKlC,UAAU,iBAA3C,4JAZpB,GAA6BC,aCAhBkC,EAAb,kDACI,WAAYhC,GAA4B,IAAD,8BACnC,cAAMA,IACDvB,MAAQ,GAFsB,EAD3C,qDAKc,IAAD,OACL,OACI,wBAAIwD,IAAKd,KAAKnB,MAAMhB,SAASnC,GACzBgD,UAAS,0BAAqBsB,KAAKnB,MAAMhB,SAASnC,KAAOsE,KAAKnB,MAAMkC,mBAAqB,oBAAsB,IAC/GT,QAAS,WACL,OAAQ,EAAKzB,MAAOmC,mBAAmB,EAAKnC,MAAMhB,SAASnC,MAC5DsE,KAAKnB,MAAMhB,SAASlC,cAXvC,GAAkCgD,aCQrBsC,EAAb,kDACI,WAAYpC,GAAgB,IAAD,8BACvB,cAAMA,IAGFqC,iBAA6B,aAJV,EAD/B,oEAOQ,IAAM5D,EAAQG,EAAM0D,WAEpBnB,KAAKhB,SAAL,eACO1B,MAVf,0CAcyB,IAAD,OAChB0C,KAAKkB,iBAAmBzD,EAAM2D,WAAU,kBAAM,EAAKC,6BAf3D,6CAmBQxB,QAAQC,IAAI,yBACZE,KAAKkB,qBApBb,+BAuBc,IAAD,OACL,OACI,yBAAKxC,UAAU,6BACX,yBAAKA,UAAU,aACX,uIACA,6BACA,wBAAIA,UAAU,6BAELsB,KAAKnB,MAAMxC,WAAa,IAAIM,KAAI,SAACkB,GAC9B,OAAO,kBAAC,EAAD,CAAciD,IAAKjD,EAASnC,GACdmC,SAAUA,EACVmD,mBAAoB,EAAKnC,MAAMmC,mBAC/BD,mBAAoB,EAAKlC,MAAMrB,iBAAiB9B,eAnCrG,GAAmCiD,aCQtB2C,EAAb,uKACY,IAAD,OACP,OACE,uBAAK5C,UAAU,8BACb,gBAAC,EAAD,MACI,uBAAKA,UAAU,iBACX,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,EAAD,CAAerC,UAAY2D,KAAKnB,MAAqBxC,UACtCmB,iBAAmBwC,KAAKnB,MAAqBrB,iBAC7CwD,mBAAqBhB,KAAKnB,MAAsBmC,sBAEjE,uBAAKtC,UAAU,yBACb,gBAAC,EAAD,CAAcb,SAAWmC,KAAKnB,MAAqBrB,sBAI7D,gBAAC,EAAD,CAAU+C,KAAOP,KAAKnB,MAAsB0C,sBAClCf,OAASR,KAAKnB,MAAsB2C,sBACpCb,OAASX,KAAKnB,MAAsB4C,yBACpCb,IAAK,WACH,OAAQ,EAAK/B,MAAsB6C,oBAErChB,YAAgE,IAAlDV,KAAKnB,MAAqBrB,iBAAiB9B,UAvB7E,GAAyBiG,aAoEVC,eAvCS,SAACtE,GACrB,MAAO,CACHjB,UAAWiB,EAAMjB,UACjBmB,iBAAkBF,EAAME,kBAAoB,CAAE9B,GAAI,OAI/B,SAACmG,GAC1B,MAAO,CACLb,mBAAoB,SAACc,GAAD,OAAgBD,EAAS,CAAEjE,KAAM,oBAAqBE,QAAS,CAAEpC,GAAIoG,MACzFP,sBAAuB,kBAAMM,EAAS,CAAEjE,KAAM,kBAC9C4D,sBAAuB,kBAAMK,EAAS,CAAEjE,KAAM,2BAC9C6D,yBAA0B,kBAAMI,EAAS,CAAEjE,KAAM,8BACjD8D,iBAAkB,WAChB,IAAMK,EAAaC,SAASC,kBAAkB,YAAY,GAAwB7C,MAC5E8C,EAAaF,SAASC,kBAAkB,YAAY,GAAyB7C,MAC7E+C,EAAgBH,SAASI,cAAc,8CAAmEhD,MAC1GiD,EAAYL,SAASC,kBAAkB,SAAS,GAAwB1C,QAC1E+C,EAAU,GAgBd,OAfoF,IAA/EN,SAASC,kBAAkB,gBAAgB,GAAwB1C,UACtE+C,EAAU,uBAEwE,IAA/EN,SAASC,kBAAkB,gBAAgB,GAAwB1C,UACtE+C,EAAU,sBAWLT,EAAS,CAAEjE,KAAM,mBAAoBE,QAAS,CAAEQ,YARnC,CAClB5C,GAAI,EACJC,SAAUoG,EACVnG,SAAUsG,EACVrG,YAAasG,EACbpG,OAAQuG,EACRtG,QAASqG,UAOFT,CAA6CN,GC3ExCiB,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUpF,MAAOA,GACf,kBAAC,EAAD,QAGJuE,SAASc,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,a","file":"static/js/main.9ef62fce.chunk.js","sourcesContent":["import { IEmployee } from '../interfaces/IEmployee';\r\n\r\nexport const StorageService = (() => {\r\n    return {\r\n        initDB() {\r\n            localStorage.setItem('employees', JSON.stringify([{\r\n                Id: 100,\r\n                fullName: 'Озерков Николай Петрович',\r\n                position: 'Ведущий инженер теплотехник',\r\n                dateOfBirth: new Date('10.23.1985'),\r\n                gender: 'Муж',\r\n                isFired: false\r\n            },\r\n            {\r\n                Id: 200,\r\n                fullName: 'Морев Семен Николаевич',\r\n                position: 'Начальник отдела теплотехники',\r\n                dateOfBirth: new Date('09.23.1988'),\r\n                gender: 'Муж',\r\n                isFired: true\r\n            },\r\n            {\r\n                Id: 300,\r\n                fullName: 'Лесов Владимир Петрович',\r\n                position: 'Кладовщик',\r\n                dateOfBirth: new Date('10.23.1998'),\r\n                gender: 'Муж',\r\n                isFired: false\r\n            }]))\r\n        },\r\n        getData(): IEmployee[] {\r\n            const employees: IEmployee[] = JSON.parse((localStorage.getItem('employees') as string));\r\n            return employees;\r\n        },\r\n        saveData(employees: IEmployee[]) {\r\n            localStorage.setItem('employees', JSON.stringify(employees));\r\n        },\r\n        getSequenceId(employees: IEmployee[]): number {\r\n            let maxId = 0;\r\n            if (Math.max.apply(Math, (employees || []).map((empl) => empl.Id)) !== Number.NEGATIVE_INFINITY) {\r\n                maxId = Math.max.apply(Math, (employees).map((empl) => empl.Id));\r\n            }\r\n            return maxId + 100;\r\n        },\r\n  }\r\n})()","import {StorageService} from './storageService';\r\nimport { IEmployee } from '../interfaces/IEmployee';\r\nimport { ISateStore } from '../interfaces/IStateStore';\r\n\r\nexport const employeeService = (() => {\r\n    return {\r\n        hasChangeEmployee(employees: IEmployee[]) {\r\n            const employeesFromDB = StorageService.getData()\r\n            return employeesFromDB.every((employeeDB) => {\r\n                const tempEmloyee = employees.find((empl) => empl.Id === employeeDB.Id);\r\n                return (tempEmloyee?.dateOfBirth === employeeDB.dateOfBirth) &&\r\n                        (tempEmloyee.fullName === employeeDB.fullName) &&\r\n                        (tempEmloyee.gender === employeeDB.gender) &&\r\n                        (tempEmloyee.isFired === employeeDB.isFired) &&\r\n                        (tempEmloyee.position === employeeDB.position);\r\n            })\r\n        },\r\n\r\n        updateEmployees(state: ISateStore) {\r\n            return {\r\n                ...state,\r\n                employees: StorageService.getData()\r\n            }\r\n        }\r\n    }\r\n})(); ","import { StorageService } from '../services/storageService';\r\nimport { employeeService } from '../services/employeeService';\r\nimport { IEmployee } from '../interfaces/IEmployee';\r\nimport { IAction } from '../interfaces/IAction';\r\n\r\nconst tempEmloyee: IEmployee = {\r\n    Id: 0,\r\n    fullName: ' ',\r\n    position: '',\r\n    dateOfBirth: new Date(),\r\n    gender: '',\r\n    isFired: false,\r\n} \r\nexport const initialState = {\r\n    selectedEmployee: tempEmloyee,\r\n    employees: StorageService.getData(),\r\n}\r\n\r\n\r\nexport function rootReducer(state = initialState, action: IAction) {\r\n    switch(action.type) {\r\n        case 'SELECTED_EMPLOYEE':\r\n            const employee = state.employees.find((empl: IEmployee) => empl.Id === action.payload.Id);\r\n            const newState = Object.assign({}, state, {\r\n                selectedEmployee: employee\r\n            });\r\n            return newState;\r\n        case 'SAVE_CHANGES':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'UPDATE_DATA_EMPLOYEES':\r\n            if (!employeeService.hasChangeEmployee(state.employees)) {\r\n                if (window.confirm('Внимание! все внесенные изменения будут потеряны')) {\r\n                return employeeService.updateEmployees(state);\r\n                }\r\n            } else {\r\n                return employeeService.updateEmployees(state);\r\n            }\r\n        case 'DELETE_SELECTED_EMPLOYEE':\r\n            const _employees = state.employees.filter((empl) => empl.Id !== state.selectedEmployee.Id);\r\n            state.selectedEmployee = tempEmloyee;\r\n            StorageService.saveData(_employees);\r\n            state.employees = _employees;\r\n            return {\r\n                ...state    \r\n            }\r\n        case 'ADD_NEW_EMPLOYEE':\r\n            action.payload.newEmployee.Id = StorageService.getSequenceId(state.employees);\r\n            const newEmployeeCollection = (state.employees || []).concat(action.payload.newEmployee);\r\n            StorageService.saveData(newEmployeeCollection);\r\n            return Object.assign({selectedEmployee: action.payload.newEmployee}, {employees: newEmployeeCollection});\r\n        \r\n        default: return state;\r\n    }\r\n\r\n}","import { createStore } from 'redux';\r\nimport { rootReducer, initialState } from '../reducers';\r\nexport const store = createStore(rootReducer, initialState);","import React, { Component } from 'react';\r\nimport '../header/header.css';\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-primary\">\r\n                <span className=\"navbar-brand text-brand\">Учет сотрудников 1.0</span>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker'; \r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { IEmployeeCardProps } from '../../interfaces/IEmployeeCardProps';\r\nimport { IEmployee } from '../../interfaces/IEmployee';\r\n\r\nexport class EmployeeCard extends Component<IEmployeeCardProps> {\r\n    constructor(props: IEmployeeCardProps) {\r\n        super(props);\r\n\r\n        this.handleChangeFullName = this.handleChangeFullName.bind(this);\r\n        this.handleChangeDate = this.handleChangeDate.bind(this);\r\n        this.handleChangePosition = this.handleChangePosition.bind(this);\r\n        this.handleChangeGender = this.handleChangeGender.bind(this);\r\n        this.handleChangeFired = this.handleChangeFired.bind(this);\r\n    }\r\n\r\n    public handleChangeFullName(event: React.ChangeEvent<HTMLInputElement>) {\r\n        console.log('change log fullname ');\r\n        (window as any).formModified = true;\r\n        this.setState({\r\n            hasChangedControl: true,\r\n            selectedEmployee: Object.assign(this.props.employee, { fullName:  event.target.value })\r\n        });\r\n    }\r\n\r\n    public handleChangeDate = (date: Date) => {\r\n        this.setState({\r\n          selectedEmployee: Object.assign(this.props.employee, { dateOfBirth: date })\r\n        });\r\n    }\r\n\r\n    public handleChangePosition = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            selectedEmployee: Object.assign(this.props.employee, { position:  event.target.value })\r\n        });\r\n    }\r\n\r\n    public handleChangeGender = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            selectedEmployee: Object.assign(this.props.employee, { gender:  event.target.value })\r\n        });\r\n    }\r\n\r\n    public handleChangeFired = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            selectedEmployee: Object.assign(this.props.employee, { isFired:  event.target.checked })\r\n        });\r\n    }\r\n\r\n    public getUTCDate = (date = new Date()) => { \r\n        if (typeof date === 'string') {\r\n            date = new Date(date);\r\n        }\r\n        return new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000)\r\n    }\r\n\r\n\r\n    render() {\r\n        const tempEmloyee: IEmployee = {\r\n            Id: 0,\r\n            fullName: ' ',\r\n            position: '',\r\n            dateOfBirth: new Date(),\r\n            gender: '',\r\n            isFired: false,\r\n        } \r\n        const employee  = this.props.employee ? this.props.employee : tempEmloyee;\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h3>Карточка сотрудника</h3>\r\n                    <hr />\r\n                    <div className=\"box-container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-xs-6\">\r\n                                <div className=\"form-group\">\r\n                                    <label>ФИО</label>\r\n                                    <input type=\"text\"\r\n                                            name=\"fullName\"\r\n                                            className=\"form-control\"\r\n                                            value={employee.fullName}\r\n                                            onChange={this.handleChangeFullName}/>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label>Должность</label>\r\n                                    <select name=\"position\" className=\"form-control\" value={employee.position} onChange={this.handleChangePosition}>\r\n                                        <option>__________</option>\r\n                                        <option>Ведущий инженер теплотехник</option>\r\n                                        <option>Начальник отдела теплотехники</option>\r\n                                        <option>Кладовщик</option>\r\n                                        <option>Водитель</option>\r\n                                        <option>Экспедитор</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xs-6 m-position-20\">\r\n                                <div className=\"form-group\">\r\n                                    <label>Дата рождения</label>\r\n                                    <div className=\"form-control\">\r\n                                        <DatePicker\r\n                                            selected={this.getUTCDate(employee.dateOfBirth)}\r\n                                            onChange={this.handleChangeDate}   \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label>Пол</label>\r\n                                    <div className=\"radio\">\r\n                                        <label className=\"radio-inline\">\r\n                                            Муж &nbsp;\r\n                                            <input type=\"radio\"\r\n                                                    name=\"genderradioM\"\r\n                                                    value='Муж'\r\n                                                    checked={employee.gender === 'Муж'}\r\n                                                    onChange={this.handleChangeGender} />\r\n                                        </label>\r\n                                            &nbsp;&nbsp;&nbsp;\r\n                                        <label className=\"radio-inline\">\r\n                                            Жен &nbsp;\r\n                                            <input type=\"radio\"\r\n                                                    name=\"genderradioW\"\r\n                                                    value='Жен'\r\n                                                    checked={employee.gender === 'Жен'}\r\n                                                    onChange={this.handleChangeGender}/>\r\n                                        </label>\r\n                                            &nbsp;\r\n                                        <span className=\"alert alert-info\"> Уволен\r\n                                            &nbsp;<input type=\"checkbox\"\r\n                                                        name=\"fired\"\r\n                                                        checked={employee.isFired}\r\n                                                        onChange={this.handleChangeFired}/>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { IToolbarProps } from '../../interfaces/IToolbarProps';\r\n\r\nexport class Toolbar extends Component<IToolbarProps> {\r\n    constructor(props: IToolbarProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar fixed-bottom navbar-light bg-primary toolbar\">\r\n                <div className=\"m-position-5\">\r\n                    <button onClick={this.props.save} className=\"btn btn-light\">Сохранить изменения</button>\r\n                    <button onClick={this.props.update} className=\"btn btn-light\">Обновить данные</button>\r\n                    <button disabled={!this.props.hasSelected} onClick={this.props.delete} className=\"btn btn-light\">Удалить выбранного сотрудника</button>\r\n                    <button onClick={this.props.add} className=\"btn btn-light\">Добавить нового сотрудника</button>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { IEmployeeItemProps } from '../../interfaces/IEmployeeItemProps';\r\n\r\nexport class EmployeeItem extends Component<IEmployeeItemProps> {\r\n    constructor(props: IEmployeeItemProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        return (\r\n            <li key={this.props.employee.Id}\r\n                className={`list-group-item ${this.props.employee.Id === this.props.selectedEmployeeId ? 'selected-employee' : ''}`}\r\n                onClick={() => {\r\n                    return (this.props).onSelectedEmployee(this.props.employee.Id)}\r\n                }>{this.props.employee.fullName}\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { IEmployee } from '../../interfaces/IEmployee';\r\nimport { EmployeeItem } from '../employee/employee';\r\nimport { store } from '../../store/configureStore';\r\n\r\ninterface IProps {\r\n    employees: IEmployee[],\r\n    selectedEmployee: IEmployee,\r\n    onSelectedEmployee: (id: number) => void;\r\n}\r\n\r\nexport class EmployeesList extends Component<IProps> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    private unsubscribeStore: Function = () => {};\r\n    private updatetStateFromStore() {\r\n        const state = store.getState();\r\n\r\n        this.setState({\r\n            ...state\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.unsubscribeStore = store.subscribe(() => this.updatetStateFromStore());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('log unmount component');\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h3>Список сотрудников</h3>\r\n                    <hr />\r\n                    <ul className=\"container-list container\">\r\n                        {              \r\n                            (this.props.employees || []).map((employee) => {\r\n                                return <EmployeeItem key={employee.Id} \r\n                                                     employee={employee}\r\n                                                     onSelectedEmployee={this.props.onSelectedEmployee}\r\n                                                     selectedEmployeeId={this.props.selectedEmployee.Id}/>\r\n                            })          \r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\n// css\nimport '../src/App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\n// components\nimport { Header } from './components/header/header';\nimport { EmployeeCard } from './components/employeeCard/employeeCard'; \nimport { Toolbar } from './components/toolbar/toolbar';\n\n// interfaces\nimport { ISateStore } from './interfaces/IStateStore';\nimport { IHandleData } from './interfaces/IHandleData';\nimport { IDispatchCustom } from './interfaces/IDispatchCustom';\nimport { EmployeesList } from './components/employees/employees.list';\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <div className=\"container-fluid full-width\">\n        <Header />\n            <div className=\"box-container\">\n                <div className=\"row\">\n                  <div className=\"col-xs-6\">\n                    <EmployeesList employees={(this.props as ISateStore).employees}\n                                   selectedEmployee={(this.props as ISateStore).selectedEmployee}\n                                   onSelectedEmployee={(this.props as IHandleData).onSelectedEmployee}/>\n                  </div>\n                  <div className=\"col-xs-6 content-card\">\n                    <EmployeeCard employee={(this.props as ISateStore).selectedEmployee}/>\n                 </div>\n              </div>\n            </div>\n          <Toolbar  save={(this.props as IHandleData).onSaveChangesEmployee}\n                    update={(this.props as IHandleData).onUpdateDataEmployees}\n                    delete={(this.props as IHandleData).onDeleteSelectedEmployee}\n                    add={() => {\n                      return (this.props as IHandleData).onAddNewEmployee()}\n                    } \n                    hasSelected={(this.props as ISateStore).selectedEmployee.Id !== 0} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ISateStore) => {\n    return {\n        employees: state.employees,\n        selectedEmployee: state.selectedEmployee || { Id: 0 }\n    }\n}\n\nconst mapDispatchToProps = (dispatch: React.Dispatch<IDispatchCustom>) => {\n  return {\n    onSelectedEmployee: (id: number) => dispatch({ type: 'SELECTED_EMPLOYEE', payload: { Id: id } }),\n    onSaveChangesEmployee: () => dispatch({ type: 'SAVE_CHANGES' }),\n    onUpdateDataEmployees: () => dispatch({ type: 'UPDATE_DATA_EMPLOYEES' }),\n    onDeleteSelectedEmployee: () => dispatch({ type: 'DELETE_SELECTED_EMPLOYEE' }),\n    onAddNewEmployee: () => {\n      const _fullName = (document.getElementsByName('fullName')[0] as HTMLInputElement).value;\n      const _position = (document.getElementsByName('position')[0] as HTMLSelectElement).value;\n      const _dateOfBirth = (document.querySelector(\".react-datepicker__input-container > input\") as HTMLInputElement).value;\n      const _isFired = (document.getElementsByName('fired')[0] as HTMLInputElement).checked;\n      let _gender = '';\n      if ((document.getElementsByName('genderradioM')[0] as HTMLInputElement).checked === true) {\n        _gender = 'Муж';\n      }\n      if ((document.getElementsByName('genderradioW')[0] as HTMLInputElement).checked === true) {\n        _gender = 'Жен';\n      }\n\n      const _newEployee = {\n        Id: 0,\n        fullName: _fullName,\n        position: _position,\n        dateOfBirth: _dateOfBirth,\n        gender: _gender,\n        isFired: _isFired,\n      }\n      return dispatch({ type: 'ADD_NEW_EMPLOYEE', payload: { newEmployee: _newEployee  } });\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}